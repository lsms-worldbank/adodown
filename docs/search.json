[
  {
    "objectID": "articles/adodown-workflow.html",
    "href": "articles/adodown-workflow.html",
    "title": "adodown-workflow",
    "section": "",
    "text": "The adodown workflow is intended to make it easier to set up and maintain Stata packages. Such that, more time can be spend writing code instead of modifying pkg-files etc.\nThe adodown workflow also allows you to write documentation in markdown format, which is a format that is quicker to learn that Stata’s smcl. This mean that you do not have access to all the features in smcl, but you can still write great documentation with the features you still have access to.\nAnother, and perhaps greater, advantage of writing the documentation in markdown files is that those files can automatically be rendered into web-based documentation. The part of adodown that renders the web-based documentation is written in R and uses Quarto. However, if you are hosting your adodown-styled Stata package on GitHub.com, then you do not need to know R or Quarto, as rendering the web-based documentation can be automated with GitHub actions."
  },
  {
    "objectID": "articles/web-documenation-using-github-actions.html",
    "href": "articles/web-documenation-using-github-actions.html",
    "title": "web-documenation-using-github-actions",
    "section": "",
    "text": "One of the main motivations for the adodown workflow is to make it easy to generate user-friendly web documentation. Web documentation creates a web site where users can browse documentation without first having to install the package from, for example, SSC. It also allows you to write supporting documentation that are not exactly help files. Such as this page you are reading right now.\nWhile encouraged, generating web documentation is optional in the adodown workflow. It is perfectly possible to use adodown to benefit from standardized Stata package practices without using web documentation. If you do not want to generate web documentation, then there is no need for you to follow the steps in this guide.\n\n\nThis guide assumes you host your adodown styled Stata package in a GitHub repository and that you will publish your web documentation using GitHub Pages. If this does not apply to you, see the last section of this page for other options.\nThis guide will show how to set up an automated workflow to build and deploy your web documentation using GitHub Actions. You do not need to know how to create GitHub Actions yourself, as you will be provided with all the templates you need. This page include a step-by-step guide for how to set it up, and it is not difficult.\nHowever, you do need to have admin access to the repository you use in order to enable GitHub Actions. If you are not the owner of the repository where you are setting this up, or the repository is hosted on an organization account, then we recommend that you talk to the owner or account admin before following this guide.\n\n\nAt the time of writing this guide, GitHub Action is free when used on public repositories, and has a small charge on private repositories if the usage exceeds a free quota. Therefore, in a typical case, using GitHub Actions in the adodown workflow will be free. GitHub may make changes to their GitHub Actions pricing at any time, so if this information is important to you, then please confirm costs at the GitHub Actions pricing page.\n\n\n\n\nIf you already have an adodown styled package you can skip to section B.1\n\n\nCreate a GitHub repository for the Stata package. Initiate the repository by creating a README.md file in the top directory. Feel free to populate this file with content at any point. The only other file that may be created manually is the .gitignore file.\nClone the repository to your computer.\nTODO: Move this step into a general vignette for how to set up a adodown styled Stata package. As this is not specific to how to set up Github Actions.\n\n\n\nUse the command ad_setup to create an adodown styled Stata package in the clone.\n\n\n\nIf you have set up your package with ad_setup using the github option then this step is already set up. You only need to follow these steps manually if this was not done. If you are not sure, then follow these instructions and make sure everything is setup.\nIn the top directory of your clone, create a folder called .github (the . is important). In that folder create a folder called workflows. In that folder create a file called build_adodown_site.yaml. Copy the content of https://github.com/lsms-worldbank/adodown/blob/main/src/ado/templates/ad-build_adodown_site.yaml and paste the into the yaml-file you just created. Commit this file to the repository.\n\n\n\nWhile build_adodown_site.yaml includes all instructions needed to build and deploy the web site with the web documentation, you need to enable GitHub Actions in your repository for those instructions to be applied.\nTo enable GitHub Actions, go to https://github.com/<account_name>/<repo_name>/settings/actions. You can also click yourself here by clicking on the Settings tab, then Actions in the menu to the left and then General. You only have access to these setting pages if you are the owner of the personal account hosting the repository, or if have admin access if the repository is hosted on an organization account.\nOn this page, make the following two changes:\n\nIn the Actions permissions section, make sure that “Allow all actions and reusable workflows” option is selected. This allows GitHub Actions to be run for this repository.\nIn the Workflow permissions section, make sure that the “Read and write permissions” option is selected. This allow a GitHub Action to make changes to the repository.\n\nIf your repository is hosted on an organization account, then these settings might be affected by global organization account settings. The organization account admin can set these changes globally at https://github.com/organizations/<account_name>/settings/actions\n\n\n\nIn this section we will refer to the default branch as main. This is synonymous with master, but we encourage everyone to use main over master. The adodown workflow will work with either of these names.\nThe GitHub Actions work flow is set up to re-build and re-deploy the web documentation each time the main branch is updated. To build it the first time, make any commit to the main branch. This includes making a merge to the main branch.\nThe GitHub Action workflow creates a new branch called gh-pages. This branch should never be modified manually.\n\n\n\nThe last step is to tell GitHub there is a web site intended to be shown as a GitHub Pages site in the gh-pages branch. To do so, go to https://github.com/<account_name>/<repo_name>/settings/pages. You can also click yourself here by clicking on the Settings tab, and then Pages in the menu to the left. You only have access to these setting pages if you are the owner of the personal account hosting the repository, or if have admin access if the repository is hosted on an organization account.\nOn this page, make the following changes:\n\nIn the Build and deployment section:\n\nIn the sub-section “Source” make sure “Deployed from a branch” is selected.\nIn the sub-section “Branch” make sure “gh-pages” is selected as branch and that “/docs” is selected as the root folder.\n\n\n\n\n\nWait a minute or two after completing the previous step and then refresh the page https://github.com/<account_name>/<repo_name>/settings/pages. The URL to the web based documentation is then listed at the top of the page.\nFrom now on, this page is updated each time anything is pushed to the main branch. Not that a merge to the main branch is considered a push.\n\n\n\n\n\n\nThe R tool adodownr used to build this web documentation allows you to add a custom logo to the web browser tab of your web documentation. To do so, save the logo in a square sized .png file called logo.png. Save the file in /images/logo.png. Push the file to the repo and then the web documentation will be recreated with this logo in the web browser tab.\n\n\n\n\nIt is possible to use the adodown(r) tools to generate web documentation even when not using a GitHub repository to host the code or when not using GitHub pages to host documentation. However, then you need to install the R-tool adodownr on your own computer, and run it yourself to build the website. See the documentation for adodownr for more details."
  },
  {
    "objectID": "articles/mdhlp-syntax.html",
    "href": "articles/mdhlp-syntax.html",
    "title": "mdhlp-syntax",
    "section": "",
    "text": "This article provides documentation for how to write helpfiles in an adodown styled Stata package using mdhlp files. The mdhlp files are used as source both when building web based documentation and when rendering Stata helpfiles in .sthlp format.\n\n\nWe recommend that you use a template and do not start with an empty file. Easiest is to use ad_command when starting a new command to create both the .ado in the ado-folder for the code of the command, and the .md in the mdhlp-folder for the documentation. If you for any reason can not, or do not want, to use ad_command, but still want use this workflow, then you can manually download the template from here.\n\n\n\nThis is how ad_sthlp will render markdown syntax to the SMCL format that is used in Stata helpfiles.\n\n\n\n\n\n\n\n\n\n\n\nMarkdown syntax\nDescription\nSMCL syntax\nComment\n\n\n\n\n\nParagraph\nUsing {pstd}/{p_end} tags\nIn markdown a paragraph is not defined by a character. Instead, a paragraph is defined as text between empty lines with no other formatting (part from inline formatting). In the Title and Syntax sections the {phang} tag is used instead of {pstd}.\n\n\n#\nHeader level 1\nUsing {title:} tag\n\n\n\n##\nHeader level 2\nUsing {dlgtab:} tag\nNo formatting applied if using more #. As in ###, #### etc.\n\n\n__ __\nInline bold font\nUsing {bf:} tag\nIgnored within code formatting\n\n\n** **\nInline underlined font\nUsing {ul:} tag\nIgnored unless used for text already in bold font\n\n\n_ _\nInline italic font\nUsing {it:} tag\nIgnored in bold font\n\n\n` `\nInline code font\nUsing {inp:} tag\nAll other inline formatting is ignored within the ` tags\n\n\n``` / ```\nMultiline code block\nUsing {input}/{text} tags\nIgnores all formatting within the ``` tags\n\n\n[ ]( )\nHyperlinks\nUsing {browse link:text} tags\nMay not be combined with other types of formatting\n\n\n\\|   \\|   \\| / \\|--\\|--\\| / \\|   \\|   \\|\nSyntax tables\nUsing {synopt} table syntax\nOnly works for a two-column table in the Syntax section. The symbol \\| is not allowed in a cell of a table.\n\n\n<!-- / -->\nComments\nCommented lines are ignored\nSupports both multi and single line comments\n\n\n\n\n\n\nText that are not formatted as tables, headers or code blocks that follows an empty line will be interpreted as a paragraph and the {pstd} will be used.\nThe {pstd} tag will be added in the beginning of the first line of text, and {p_end} will added on it’s own line before the first subsequent empty line. This means that lines of text only separated by a line breaks will still be considered the same paragraph as long as there are no empty lines.\nIn the Title and Syntax sections, the {phang} tag is used instead of {pstd}. This is to highlight the command name in the special paragraphs typically found in those sections.\n\n\n\nad_sthlp has support for two header levels corresponding to markdowns header levels # for level 1 and ## for level 2. Level 1 headers are formatted using the {title} tag when rendered to Stata helpfiles, and level 2 headers are formatted using the {dlgtb} tag.\nThere is no established convention in the Stata community that {title} and {dlgtb} have a level 1 and 2 relation between each other. This is simply a subjective implementation of ad_sthlp.\n\n\nAny line that starts with # will be treated as a level 1 heading and rendered as a title using the {title} tag. Everything that follows # will be used as the title text. Adding other types of formatting to the title text might work, but it is not supported, and therefore not recommended.\n\n\n\nAny line that starts with ## will be treated as a level 2 heading and rendered as a dialogue tab using the {dlgtab} tag. Everything that follows ## will be used as the dialogue tab text. Adding other types of formatting to the dialogue box text might work, but it is not supported, and therefore not recommended.\n\n\n\n\n\n\nText between __ (two _ underscores) tags, as in __bold text__, is formatted as {bf:bold text} when rendered to Stata helpfiles.\n\n\n\nText between _ (a single underscore) tags, as in _italicized text_, is formatted as {it:italicized text} when rendered to Stata helpfiles.\nIt is not possible to italicize a word with _, as _ in an italicized word will always be interpreted as the end of italic formatting.\nIt is not possible to italicize bold font text. This is to make it possible to express as command name like ad_sthlp in bold font. _ is therefore ignored in bold font.\n\n\n\nText between ** ** tags in bold font text, as in __**underlined text**__, is formatted as {bf:{ul:italicized text}} when rendered to Stata helpfiles.\nNote that underlined format is ignored unless it is applied to text already formatted with bold font. This is due to underlined formatting not existing in markdown, and markdown is used for the web documentation in the adodown workflow. The recommendation is therefore to use underlined formatting sparsely.\nHowever, underlined formatting has one important function in Stata helpfiles. It indicates the shortest allowed abbreviations of command and option names. Since abbreviations are only allowed for options in community written commands we will only focus on underlined formatting for abbreviations in option names.\nOption names are in bold font, and underline font should therefore only be used on text in bold font. This reduces the risk of relying too much on underlined formatting when writing Stata helpfiles and then realizing underlining is not supported in web documentation.\n\n\n\nHere are recommendations on how combine inline formatting to format syntax of command names and command option names.\n\n\n\n\n\n\n\nExample\nDescription\n\n\n\n\n__ad_sthlp__\nCommand named ad_sthlp. Do not use underline in command names as abbreviations are not allowed in names of community written commands.\n\n\n__option__\nOption named option. No parameter is allowed. No abbreviation is allowed.\n\n\n__**opt**ion__\nOption named option. No parameter is allowed. The option named is allowed to abbreviate to opt.\n\n\n__option__(_string_)\nOption named option. A string parameter is expected. No abbreviation is allowed.\n\n\n__**opt**ion__(_string_)\nOption named option. A string parameter is expected. The option named is allowed to abbreviate to opt.\n\n\n\n\n\n\nAny text between two ` on the same line will be formatted using the {input} tag. You may not split the two ` across multiple lines. If unmatched ` are found, then a warning will be issued.\nIt is not possible to show a backtick ` in an inline comment. For example when trying to show a local referenced as in open `folder'/myfile.dta. The ` in the inline formatting will always be interpreted as the end of the inline code formatting when converted to Stata help files. It is still possible to show the backtick ` in code blocks (see below).\nAll other formatting will be ignored in text that is formatted as a code. This means that cd in ab_cd_ef will not be italicized. The _ signs will be kept and formatted as code.\n\n\n\n\nAny text between lines that starts with ``` (commonly referred to as a code block) will be formatted using the {input} tag. Any text following on the same line as ``` will be ignored when converting to Stata help files. Code blocks are suitable for longer examples of code.\nThe initial ``` will be replaced with the {input} tag, and the ending ``` will be replaced with {text}. The text in-between is indented 8 blank spaces (twice the indent for {pstd}).\n\n\n\nMarkdown links on the format [adodown](https://github.com/lsms-worldbank/adodown) will be converted to SMCL links on the format {browse \"https://github.com/lsms-worldbank/adodown\":adodown}. Only links to internet URLs are supported. Creating hyperlinks to resources installed in the local Stata installation, for example {help : generate}, are currently not supported.\n\n\n\nThe only supported table is the syntax option table in the Syntax section. This is a table that list all the options in the first column and provide a short description in the second column. The table may only be exactly two columns wide. When rendered into a Stata helpfile the column titles will be “options” and “Description” which is the Stata defaults. Only “options” will be italicized.\nTables in any other section than the Syntax section will be ignored in the current version of ad_sthlp. Until support for tables in other sections are implemented, the recommendation is to use vignette articles to document anything best described in a table.\n\n\n\nAny line that starts with <!-- will be treated as a comment and be ignored when converting to .sthlp format. A comment ends with -->. If <!-- and --> are on multiple lines, then both those lines, as well as any lines in-between those lines, will be treated as comments.\nAnything on the same line as --> will be treated as a comment even if it comes after -->. A line with any text before <!-- will not be treated as a comment and a warning will be thrown. Due to these two behaviors it is not possible to do an inline comment where only part of a line is a comment. Hence, the line Not a comment <!-- comment --> not a comment will be converted verbatim and everything, including the <!-- and --> tags, will be displayed when viewing the helpfile."
  },
  {
    "objectID": "src/tests/ad_setup/test-ad_setup.html",
    "href": "src/tests/ad_setup/test-ad_setup.html",
    "title": "adodown",
    "section": "",
    "text": "The only thing needed to run the test is to open file adodown\\tests\\ad_setup.do and edit the root path at the top of the folder to point to the clone in your file system.\n* AS root path\nif c(username) == \"<computer username>\" {\n    local clone \"<clone file path>\"\n}\nTest 1 shows how the command can run with no manual input. All package meta information is in the command options. In test 2 no package meta information is passed as options. Instead, the command will prompt the user to enter it manually. You can mix passing meta info in options and provide manually.\nSee outputs of tests here: adodown\\tests\\outputs\\ad_setup\n\n\n\nThe command has 4 stages\n\nTest package meta info passed in options\nPrompt user for package meta info that was not passed in info\nPrepare and test the folder template creation:\n\nTest that folders can be created\nGet templates from repo\n\nOnce testing is successful, prompt user to confirm (unless option autoconfirm is used)\nThen create the templates\n\nPopulate pkg file and toc file with package meta info\nOnly now create all the folder and files\n\n\nThe command sets up folders and use templates stored here: adodown\\ado\\templates.\n\nCurrently the command downloads the templates from the repo over https. That is ok and should remain one option. I think there should be an offline option. I have ideas for that. Stata’s ancillary files was not the best fit for this.\n\nThe command populates the pkg file such that it can be updated by future commands used when a user wants to create a new command."
  },
  {
    "objectID": "src/mdhlp/ad_publish.html",
    "href": "src/mdhlp/ad_publish.html",
    "title": "adodown",
    "section": "",
    "text": "ad_publish - This command is used to set up a package for publication"
  },
  {
    "objectID": "src/mdhlp/ad_publish.html#example-1",
    "href": "src/mdhlp/ad_publish.html#example-1",
    "title": "adodown",
    "section": "Example 1",
    "text": "Example 1\nThis example assumes that there is already a adodown-styled package folder at the location the local myfolder is pointing to, and that some commands have already been created. Any mdhlp-files in the mdhlp folder in the folder myfolder is pointing to will be rendered to Stata helpfile format and saved in the sthlp folder. Then the command will update the version meta data\n* point a local to the folder where the package is located\nlocal myfolder \"path/to/folder\"\n\n* Render the Stata helpfiles\nad_publish, adf(\"`myfolder'\")"
  },
  {
    "objectID": "src/mdhlp/ad_update.html",
    "href": "src/mdhlp/ad_update.html",
    "title": "adodown",
    "section": "",
    "text": "ad_update - This command is used for short description."
  },
  {
    "objectID": "src/mdhlp/ad_update.html#example-1",
    "href": "src/mdhlp/ad_update.html#example-1",
    "title": "adodown",
    "section": "Example 1",
    "text": "Example 1\nThis example assumes that there is already a adodown-styled package folder at the location the local myfolder is pointing to. Then the title is update to '<pkgname>': module to do great data work\", the minor version is incremented by 1 and the Stata target version is set to 14.1.\n* point a local to the folder where the package is located\nlocal myfolder \"path/to/folder\"\n* Package meta info\nlocal pkg \"my_package\"\n\n* Add command mycmd to the package folder\nad_update , adfolder(\"`myfolder'\") pkg(\"`pkg'\") ///\n  newtitle(\"module to do great data work\") newpkgversion(minor) newstataversion(14.1)"
  },
  {
    "objectID": "src/mdhlp/ad_setup.html",
    "href": "src/mdhlp/ad_setup.html",
    "title": "adodown",
    "section": "",
    "text": "Syntax\nad_setup , adfolder(string) [ name(string) description(string) author(string) contact(string) url(string) autoprompt github ]\n\n\n\n\n\n\n\noptions\nDescription\n\n\n\n\nadfolder(string)\nLocation where to create the adodown-styled package\n\n\nname(string)\nName of package\n\n\ndescription(string)\nDescription of package\n\n\nauthor(string)\nAuthor or authors\n\n\ncontact(string)\nContact information\n\n\nurl(string)\nURL (for example to repo hosting the package)\n\n\nautoprompt\nSuppress the prompt for missing non-required input\n\n\ngithub\nAdd GitHub files without prompting\n\n\n\nRead this helpfile in the adodown’s package web-documentation where you also find articles with guides and best practices related to the commands in this package.\n\n\nDescription\nThis command creates the initial folder template needed to write and document Stata command packages in the adodown workflow.\nThis workflow makes it easier to create Stata command and packages both ready for distribution on SSC and from a GitHub repository. This workflow also makes writing both web-documentation and helpfiles easier. The helpfiles are written in markdown files that are then used both to render Stata helpfile in .sthlp-format using the ad_sthlp command, and to render web documentation that can, for example, be hosted in a GitHub Page.\n\n\nOptions\nadfolder(string) is used to indicate the location where package folder will be created. This folder can, for example, be a newly created GitHub repository cloned to the local computer.\nname(string) specifies the name of the package that will be created. This is the name that will then be used in ssc install <name> or net install <name>. A command with the same name will be created and added to the package. While this option is optional, this package meta data is required. If a name is not provided in this option, then the user will be prompted to enter the name interactively.\ndescription(string) specifies the description of the package. This is the description paragraph that will displayed when using ssc describe <name> or net describe <name>. If a description is not provided in this option, then the user will be prompted to enter the description interactively. Since this meta data is not required, the user can leave it empty.\nauthor(string) specifies the name of the author or authors of this package. This information will be included when using ssc describe <name> or net describe <name>. While this option is optional, this package meta data is required. If an author is not provided in this option, then the user will be prompted to enter the name interactively.\ncontact(string) specifies the contact information where a users of this package can ask for support. This information will be included when using ssc describe <name> or net describe <name>. If contact information is not provided in this option, then the user will be prompted to enter the contact information interactively. Since this meta data is not required, the user can leave it empty.\nurl(string) specifies a website for where this code is hosted. This should not be where the web-documentation generated in the adodown is hosted, but where the source code is hosted. The web-documentation will include a link pointing to the URL. If using GitHub, then the intended URL should be on this format: https://github.com/lsms-worldbank/adodown. This information will be included when using ssc describe <name> or net describe <name>. If a URL is not provided in this option, then the user will be prompted to enter the URL interactively. Since this meta data is not required, the user can leave it empty.\nautoprompt suppresses the prompt for missing non-required input, such as package description or author. If this options is used, the command will assume that GitHub templates should not be used. When this option is used, the command will still prompt the user for the package name unless that is provided in name() or author() as that information is required.\ngithub makes the command add files useful if the package is stored in a GitHub repository. The two files that are added are a .gitignore file and a GitHub Actions workflow .yaml file. The .gitignore is tailored to adodown styled packages such that only required files are pushed to the repository. This ignore template may be modified if preferred or needed. The Github Actions workflow file includes instructions for an automated workflow to generate web based documentation. Read more about this workflow and how to enable it in your repository here. TODO: Add link to vignette when live.\n\n\nExamples\nThis example creates a package folder for a package named my_package in the location that the local myfolder points to.\n* point a local to the folder where the package will be created\nlocal myfolder \"path/to/folder\"\n\n* Package meta info\nlocal pkg \"my_package\"\nlocal aut \"John Doe\"\nlocal des \"This packages does amazing thing A, B and C.\"\nlocal url \"https://github.com/lsms-worldbank/adodown\"\nlocal con \"jdoe@worldbank.org\"\n\n* Set up adodown-styled package folder\nad_setup, adfolder(\"`myfolder'\") autoprompt    ///\n     name(\"`pkg'\") author(\"`aut'\") desc(\"`des'\") ///\n     url(\"`url'\") contact(\"`con'\")\n\n\nFeedback, bug reports and contributions\nRead more about the commands in this package on the GitHub repository for the adodown package.\nPlease use the issues feature e to communicate any feedback, report bugs, or to make feature requests.\nPRs with suggestions for improvements are also greatly appreciated.\n\n\nAuthors\nLSMS Team, The World Bank lsms@worldbank.org"
  },
  {
    "objectID": "src/mdhlp/ad_sthlp.html",
    "href": "src/mdhlp/ad_sthlp.html",
    "title": "adodown",
    "section": "",
    "text": "ad_sthlp - Converts mdhlp-files to sthlp-files in the adodown workflow."
  },
  {
    "objectID": "src/mdhlp/ad_sthlp.html#example-1",
    "href": "src/mdhlp/ad_sthlp.html#example-1",
    "title": "adodown",
    "section": "Example 1",
    "text": "Example 1\nThis example assumes that there is already a adodown-styled package folder at the location the local myfolder is pointing to, and that some commands have already been created. Any mdhlp-files in the mdhlp folder in the folder myfolder is pointing to will be rendered to Stata helpfile format and saved in the sthlp folder.\n* point a local to the folder where the package is located\nlocal myfolder \"path/to/folder\"\n\n* Render the Stata helpfiles\nad_sthlp, adf(\"`myfolder'\")"
  },
  {
    "objectID": "src/mdhlp/ad_sthlp.html#example-2",
    "href": "src/mdhlp/ad_sthlp.html#example-2",
    "title": "adodown",
    "section": "Example 2",
    "text": "Example 2\nThis example includes the steps for how to create the adodown-styled package folder in the location the local myfolder is pointing to, creating some commands and then render the template mdhlp-files to Stata helpfiles.\n* point a local to the folder where the package is located\nlocal myfolder \"path/to/folder\"\n\n* Package meta info\nlocal pkg \"my_package\"\nlocal aut \"John Doe\"\nlocal des \"This packages does amazing thing A, B and C.\"\nlocal url \"https://github.com/lsms-worldbank/adodown\"\nlocal con \"jdoe@worldbank.org\"\n\n* Set up adodown-styled package folder\nad_setup, adfolder(\"`myfolder'\") autoconfirm    ///\n     name(\"`pkg'\") author(\"`aut'\") desc(\"`des'\") ///\n     url(\"`url'\") contact(\"`con'\")\n\n* Add command mycmd to the package folder\nad_command create mycmd1, adf(\"`myfolder'\") pkg(\"`pkg'\")\nad_command create mycmd2, adf(\"`myfolder'\") pkg(\"`pkg'\")\n\n* Render the Stata helpfiles\nad_sthlp, adf(\"`myfolder'\")"
  },
  {
    "objectID": "src/mdhlp/ad_command.html",
    "href": "src/mdhlp/ad_command.html",
    "title": "adodown",
    "section": "",
    "text": "ad_command - Creates or removes commands in the adodown workflow."
  },
  {
    "objectID": "src/mdhlp/ad_command.html#example-1",
    "href": "src/mdhlp/ad_command.html#example-1",
    "title": "adodown",
    "section": "Example 1",
    "text": "Example 1\nThis example assumes that there is already a adodown-styled package folder at the location the local myfolder is pointing to.\n* point a local to the folder with the package where a new command will be created\nlocal myfolder \"path/to/folder\"\n\n* Package meta info\nlocal pkg \"my_package\"\n\n* Add command mycmd to the package folder\nad_command create mycmd, adf(\"`myfolder'\") pkg(\"`pkg'\")"
  },
  {
    "objectID": "src/mdhlp/ad_command.html#example-2",
    "href": "src/mdhlp/ad_command.html#example-2",
    "title": "adodown",
    "section": "Example 2",
    "text": "Example 2\nThis example includes the steps for how to create the adodown-styled package folder in the location the local myfolder is pointing to.\n* point a local to the folder where the package will be created\nlocal myfolder \"path/to/folder\"\n\n* Package meta info\nlocal pkg \"my_package\"\nlocal aut \"John Doe\"\nlocal des \"This packages does amazing thing A, B and C.\"\nlocal url \"https://github.com/lsms-worldbank/adodown\"\nlocal con \"jdoe@worldbank.org\"\n\n* Set up adodown-styled package folder\nad_setup, adfolder(\"`myfolder'\") autoconfirm    ///\n     name(\"`pkg'\") author(\"`aut'\") desc(\"`des'\") ///\n     url(\"`url'\") contact(\"`con'\")\n\n* Add command mycmd to the package folder\nad_command create mycmd, adf(\"`myfolder'\") pkg(\"`pkg'\")"
  },
  {
    "objectID": "src/mdhlp/adodown.html",
    "href": "src/mdhlp/adodown.html",
    "title": "adodown",
    "section": "",
    "text": "Syntax\nadodown\nRead this helpfile in the adodown’s package web-documentation where you also find articles with guides and best practices related to the commands in this package.\n\n\nDescription\nThis command only returns the version number and version data to the user. This command has little application for a typical user. For packages installed on SSC it is important that a there is a command in the package that has the same name as the package. That is the main purpose of this command.\n\n\nOptions\nThis command has no options.\n\n\nFeedback, bug reports and contributions\nRead more about the commands in this package on the GitHub repository for the adodown package.\nPlease use the issues feature e to communicate any feedback, report bugs, or to make feature requests.\nPRs with suggestions for improvements are also greatly appreciated.\n\n\nAuthors\nLSMS Team, The World Bank lsms@worldbank.org"
  },
  {
    "objectID": "src/vignettes/web-documenation-using-github-actions.html",
    "href": "src/vignettes/web-documenation-using-github-actions.html",
    "title": "adodown",
    "section": "",
    "text": "One of the main motivations for the adodown workflow is to make it easy to generate user-friendly web documentation. Web documentation creates a web site where users can browse documentation without first having to install the package from, for example, SSC. It also allows you to write supporting documentation that are not exactly help files. Such as this page you are reading right now.\nWhile encouraged, generating web documentation is optional in the adodown workflow. It is perfectly possible to use adodown to benefit from standardized Stata package practices without using web documentation. If you do not want to generate web documentation, then there is no need for you to follow the steps in this guide.\n\n\nThis guide assumes you host your adodown styled Stata package in a GitHub repository and that you will publish your web documentation using GitHub Pages. If this does not apply to you, see the last section of this page for other options.\nThis guide will show how to set up an automated workflow to build and deploy your web documentation using GitHub Actions. You do not need to know how to create GitHub Actions yourself, as you will be provided with all the templates you need. This page include a step-by-step guide for how to set it up, and it is not difficult.\nHowever, you do need to have admin access to the repository you use in order to enable GitHub Actions. If you are not the owner of the repository where you are setting this up, or the repository is hosted on an organization account, then we recommend that you talk to the owner or account admin before following this guide.\n\n\nAt the time of writing this guide, GitHub Action is free when used on public repositories, and has a small charge on private repositories if the usage exceeds a free quota. Therefore, in a typical case, using GitHub Actions in the adodown workflow will be free. GitHub may make changes to their GitHub Actions pricing at any time, so if this information is important to you, then please confirm costs at the GitHub Actions pricing page.\n\n\n\n\nIf you already have an adodown styled package you can skip to section B.1\n\n\nCreate a GitHub repository for the Stata package. Initiate the repository by creating a README.md file in the top directory. Feel free to populate this file with content at any point. The only other file that may be created manually is the .gitignore file.\nClone the repository to your computer.\nTODO: Move this step into a general vignette for how to set up a adodown styled Stata package. As this is not specific to how to set up Github Actions.\n\n\n\nUse the command ad_setup to create an adodown styled Stata package in the clone.\n\n\n\nIf you have set up your package with ad_setup using the github option then this step is already set up. You only need to follow these steps manually if this was not done. If you are not sure, then follow these instructions and make sure everything is setup.\nIn the top directory of your clone, create a folder called .github (the . is important). In that folder create a folder called workflows. In that folder create a file called build_adodown_site.yaml. Copy the content of https://github.com/lsms-worldbank/adodown/blob/main/src/ado/templates/ad-build_adodown_site.yaml and paste the into the yaml-file you just created. Commit this file to the repository.\n\n\n\nWhile build_adodown_site.yaml includes all instructions needed to build and deploy the web site with the web documentation, you need to enable GitHub Actions in your repository for those instructions to be applied.\nTo enable GitHub Actions, go to https://github.com/<account_name>/<repo_name>/settings/actions. You can also click yourself here by clicking on the Settings tab, then Actions in the menu to the left and then General. You only have access to these setting pages if you are the owner of the personal account hosting the repository, or if have admin access if the repository is hosted on an organization account.\nOn this page, make the following two changes:\n\nIn the Actions permissions section, make sure that “Allow all actions and reusable workflows” option is selected. This allows GitHub Actions to be run for this repository.\nIn the Workflow permissions section, make sure that the “Read and write permissions” option is selected. This allow a GitHub Action to make changes to the repository.\n\nIf your repository is hosted on an organization account, then these settings might be affected by global organization account settings. The organization account admin can set these changes globally at https://github.com/organizations/<account_name>/settings/actions\n\n\n\nIn this section we will refer to the default branch as main. This is synonymous with master, but we encourage everyone to use main over master. The adodown workflow will work with either of these names.\nThe GitHub Actions work flow is set up to re-build and re-deploy the web documentation each time the main branch is updated. To build it the first time, make any commit to the main branch. This includes making a merge to the main branch.\nThe GitHub Action workflow creates a new branch called gh-pages. This branch should never be modified manually.\n\n\n\nThe last step is to tell GitHub there is a web site intended to be shown as a GitHub Pages site in the gh-pages branch. To do so, go to https://github.com/<account_name>/<repo_name>/settings/pages. You can also click yourself here by clicking on the Settings tab, and then Pages in the menu to the left. You only have access to these setting pages if you are the owner of the personal account hosting the repository, or if have admin access if the repository is hosted on an organization account.\nOn this page, make the following changes:\n\nIn the Build and deployment section:\n\nIn the sub-section “Source” make sure “Deployed from a branch” is selected.\nIn the sub-section “Branch” make sure “gh-pages” is selected as branch and that “/docs” is selected as the root folder.\n\n\n\n\n\nWait a minute or two after completing the previous step and then refresh the page https://github.com/<account_name>/<repo_name>/settings/pages. The URL to the web based documentation is then listed at the top of the page.\nFrom now on, this page is updated each time anything is pushed to the main branch. Not that a merge to the main branch is considered a push.\n\n\n\n\n\n\nThe R tool adodownr used to build this web documentation allows you to add a custom logo to the web browser tab of your web documentation. To do so, save the logo in a square sized .png file called logo.png. Save the file in /src/dev/assets/logo.png. Push the file to the repo and then the web documentation will be recreated with this logo in the web browser tab.\n\n\n\n\nIt is possible to use the adodown(r) tools to generate web documentation even when not using a GitHub repository to host the code or when not using GitHub pages to host documentation. However, then you need to install the R-tool adodownr on your own computer, and run it yourself to build the website. See the documentation for adodownr for more details."
  },
  {
    "objectID": "src/vignettes/mdhlp-syntax.html",
    "href": "src/vignettes/mdhlp-syntax.html",
    "title": "adodown",
    "section": "",
    "text": "This article provides documentation for how to write helpfiles in an adodown styled Stata package using mdhlp files. The mdhlp files are used as source both when building web based documentation and when rendering Stata helpfiles in .sthlp format.\n\n\nWe recommend that you use a template and do not start with an empty file. Easiest is to use ad_command when starting a new command to create both the .ado in the ado-folder for the code of the command, and the .md in the mdhlp-folder for the documentation. If you for any reason can not, or do not want, to use ad_command, but still want use this workflow, then you can manually download the template from here.\n\n\n\nThis is how ad_sthlp will render markdown syntax to the SMCL format that is used in Stata helpfiles.\n\n\n\n\n\n\n\n\n\n\n\nMarkdown syntax\nDescription\nSMCL syntax\nComment\n\n\n\n\n\nParagraph\nUsing {pstd}/{p_end} tags\nIn markdown a paragraph is not defined by a character. Instead, a paragraph is defined as text between empty lines with no other formatting (part from inline formatting). In the Title and Syntax sections the {phang} tag is used instead of {pstd}.\n\n\n#\nHeader level 1\nUsing {title:} tag\n\n\n\n##\nHeader level 2\nUsing {dlgtab:} tag\nNo formatting applied if using more #. As in ###, #### etc.\n\n\n__ __\nInline bold font\nUsing {bf:} tag\nIgnored within code formatting\n\n\n** **\nInline underlined font\nUsing {ul:} tag\nIgnored unless used for text already in bold font\n\n\n_ _\nInline italic font\nUsing {it:} tag\nIgnored in bold font\n\n\n` `\nInline code font\nUsing {inp:} tag\nAll other inline formatting is ignored within the ` tags\n\n\n``` / ```\nMultiline code block\nUsing {input}/{text} tags\nIgnores all formatting within the ``` tags\n\n\n[ ]( )\nHyperlinks\nUsing {browse link:text} tags\nMay not be combined with other types of formatting\n\n\n\\|   \\|   \\| / \\|--\\|--\\| / \\|   \\|   \\|\nSyntax tables\nUsing {synopt} table syntax\nOnly works for a two-column table in the Syntax section. The symbol \\| is not allowed in a cell of a table.\n\n\n<!-- / -->\nComments\nCommented lines are ignored\nSupports both multi and single line comments\n\n\n\n\n\n\nText that are not formatted as tables, headers or code blocks that follows an empty line will be interpreted as a paragraph and the {pstd} will be used.\nThe {pstd} tag will be added in the beginning of the first line of text, and {p_end} will added on it’s own line before the first subsequent empty line. This means that lines of text only separated by a line breaks will still be considered the same paragraph as long as there are no empty lines.\nIn the Title and Syntax sections, the {phang} tag is used instead of {pstd}. This is to highlight the command name in the special paragraphs typically found in those sections.\n\n\n\nad_sthlp has support for two header levels corresponding to markdowns header levels # for level 1 and ## for level 2. Level 1 headers are formatted using the {title} tag when rendered to Stata helpfiles, and level 2 headers are formatted using the {dlgtb} tag.\nThere is no established convention in the Stata community that {title} and {dlgtb} have a level 1 and 2 relation between each other. This is simply a subjective implementation of ad_sthlp.\n\n\nAny line that starts with # will be treated as a level 1 heading and rendered as a title using the {title} tag. Everything that follows # will be used as the title text. Adding other types of formatting to the title text might work, but it is not supported, and therefore not recommended.\n\n\n\nAny line that starts with ## will be treated as a level 2 heading and rendered as a dialogue tab using the {dlgtab} tag. Everything that follows ## will be used as the dialogue tab text. Adding other types of formatting to the dialogue box text might work, but it is not supported, and therefore not recommended.\n\n\n\n\n\n\nText between __ (two _ underscores) tags, as in __bold text__, is formatted as {bf:bold text} when rendered to Stata helpfiles.\n\n\n\nText between _ (a single underscore) tags, as in _italicized text_, is formatted as {it:italicized text} when rendered to Stata helpfiles.\nIt is not possible to italicize a word with _, as _ in an italicized word will always be interpreted as the end of italic formatting.\nIt is not possible to italicize bold font text. This is to make it possible to express as command name like ad_sthlp in bold font. _ is therefore ignored in bold font.\n\n\n\nText between ** ** tags in bold font text, as in __**underlined text**__, is formatted as {bf:{ul:italicized text}} when rendered to Stata helpfiles.\nNote that underlined format is ignored unless it is applied to text already formatted with bold font. This is due to underlined formatting not existing in markdown, and markdown is used for the web documentation in the adodown workflow. The recommendation is therefore to use underlined formatting sparsely.\nHowever, underlined formatting has one important function in Stata helpfiles. It indicates the shortest allowed abbreviations of command and option names. Since abbreviations are only allowed for options in community written commands we will only focus on underlined formatting for abbreviations in option names.\nOption names are in bold font, and underline font should therefore only be used on text in bold font. This reduces the risk of relying too much on underlined formatting when writing Stata helpfiles and then realizing underlining is not supported in web documentation.\n\n\n\nHere are recommendations on how combine inline formatting to format syntax of command names and command option names.\n\n\n\n\n\n\n\nExample\nDescription\n\n\n\n\n__ad_sthlp__\nCommand named ad_sthlp. Do not use underline in command names as abbreviations are not allowed in names of community written commands.\n\n\n__option__\nOption named option. No parameter is allowed. No abbreviation is allowed.\n\n\n__**opt**ion__\nOption named option. No parameter is allowed. The option named is allowed to abbreviate to opt.\n\n\n__option__(_string_)\nOption named option. A string parameter is expected. No abbreviation is allowed.\n\n\n__**opt**ion__(_string_)\nOption named option. A string parameter is expected. The option named is allowed to abbreviate to opt.\n\n\n\n\n\n\nAny text between two ` on the same line will be formatted using the {input} tag. You may not split the two ` across multiple lines. If unmatched ` are found, then a warning will be issued.\nIt is not possible to show a backtick ` in an inline comment. For example when trying to show a local referenced as in open `folder'/myfile.dta. The ` in the inline formatting will always be interpreted as the end of the inline code formatting when converted to Stata help files. It is still possible to show the backtick ` in code blocks (see below).\nAll other formatting will be ignored in text that is formatted as a code. This means that cd in ab_cd_ef will not be italicized. The _ signs will be kept and formatted as code.\n\n\n\n\nAny text between lines that starts with ``` (commonly referred to as a code block) will be formatted using the {input} tag. Any text following on the same line as ``` will be ignored when converting to Stata help files. Code blocks are suitable for longer examples of code.\nThe initial ``` will be replaced with the {input} tag, and the ending ``` will be replaced with {text}. The text in-between is indented 8 blank spaces (twice the indent for {pstd}).\n\n\n\nMarkdown links on the format [adodown](https://github.com/lsms-worldbank/adodown) will be converted to SMCL links on the format {browse \"https://github.com/lsms-worldbank/adodown\":adodown}. Only links to internet URLs are supported. Creating hyperlinks to resources installed in the local Stata installation, for example {help : generate}, are currently not supported.\n\n\n\nThe only supported table is the syntax option table in the Syntax section. This is a table that list all the options in the first column and provide a short description in the second column. The table may only be exactly two columns wide. When rendered into a Stata helpfile the column titles will be “options” and “Description” which is the Stata defaults. Only “options” will be italicized.\nTables in any other section than the Syntax section will be ignored in the current version of ad_sthlp. Until support for tables in other sections are implemented, the recommendation is to use vignette articles to document anything best described in a table.\n\n\n\nAny line that starts with <!-- will be treated as a comment and be ignored when converting to .sthlp format. A comment ends with -->. If <!-- and --> are on multiple lines, then both those lines, as well as any lines in-between those lines, will be treated as comments.\nAnything on the same line as --> will be treated as a comment even if it comes after -->. A line with any text before <!-- will not be treated as a comment and a warning will be thrown. Due to these two behaviors it is not possible to do an inline comment where only part of a line is a comment. Hence, the line Not a comment <!-- comment --> not a comment will be converted verbatim and everything, including the <!-- and --> tags, will be displayed when viewing the helpfile."
  },
  {
    "objectID": "src/vignettes/adodown-workflow.html",
    "href": "src/vignettes/adodown-workflow.html",
    "title": "adodown",
    "section": "",
    "text": "The adodown workflow is intended to make it easier to set up and maintain Stata packages. Such that, more time can be spend writing code instead of modifying pkg-files etc.\nThe adodown workflow also allows you to write documentation in markdown format, which is a format that is quicker to learn that Stata’s smcl. This mean that you do not have access to all the features in smcl, but you can still write great documentation with the features you still have access to.\nAnother, and perhaps greater, advantage of writing the documentation in markdown files is that those files can automatically be rendered into web-based documentation. The part of adodown that renders the web-based documentation is written in R and uses Quarto. However, if you are hosting your adodown-styled Stata package on GitHub.com, then you do not need to know R or Quarto, as rendering the web-based documentation can be automated with GitHub actions."
  },
  {
    "objectID": "src/ado/templates/ad-src-tests-README.html",
    "href": "src/ado/templates/ad-src-tests-README.html",
    "title": "adodown",
    "section": "",
    "text": "In this folder"
  },
  {
    "objectID": "src/ado/templates/ad-src-vignettes-README.html",
    "href": "src/ado/templates/ad-src-vignettes-README.html",
    "title": "adodown",
    "section": "",
    "text": "In this folder you can put article styled documentation. What do we mean by that? These article styled vignettes is supposed to be a complement to the command documentation written in the mdhlp-files which are later rendered into sthlp-files.\nThe command documentation are technical descriptions on how to run a command, what the options are, how they are specified, and what the expected outcome is. Article styled documentation compliments that by being a long-form guide that can be more narrative than technical.\nFor example, a vignette can be about the initial motivation behind a command, it can be about how multiple commands in the package can work together, or anything else the authors of a package wants to communicate to the users."
  },
  {
    "objectID": "src/ado/templates/ad-src-sthlp-README.html",
    "href": "src/ado/templates/ad-src-sthlp-README.html",
    "title": "adodown",
    "section": "",
    "text": "In the adodown workflow you should not edit these files directly. They should be edited in the markdown files in the folder mdhlp. The files in this folder should be rendered by the command adrendersthlp."
  },
  {
    "objectID": "src/ado/templates/ad-src-mdhlp-README.html",
    "href": "src/ado/templates/ad-src-mdhlp-README.html",
    "title": "adodown",
    "section": "",
    "text": "In the adodown workflow you should not create any of the files in this folder using the command adnewcommand. The markdown files here are then rendered into Stata help files saved in the folder stlhp. The content in this folder is also used to render a documentation website using the R-tool adodown.\nFor syntax rules on how to write Stata helpfiles in markdown in the adodown workflow, see this article (link to adodown vignette)."
  },
  {
    "objectID": "src/ado/templates/ad-cmd-command.html",
    "href": "src/ado/templates/ad-cmd-command.html",
    "title": "adodown",
    "section": "",
    "text": "Syntax\nADCOMMANDNAME , option1(string)\n\n\n\noptions\nDescription\n\n\n\n\noption1(string)\nShort description of option1\n\n\n\n\n\nDescription\n\n\n\nOptions\n\noption1(string) is used for xyz. Longer description (paragraph length) of all options, their intended use case and best practices related to them.\n\n\nStored results\n\n\n\nExamples\n\n\n\nFeedback, bug reports and contributions\n\n\n\nAuthors\nTODO: Populate this field from .pkg file"
  },
  {
    "objectID": "src/ado/templates/ad-src-ado-README.html",
    "href": "src/ado/templates/ad-src-ado-README.html",
    "title": "adodown",
    "section": "",
    "text": "In the adodown workflow you should not create any of the ado-files in this folder manually. Instead you are intended to use the command adnewcommand.\nTODO: How to create auxiliary files?\n* Here is a codebox with some terrible code examples\nmy local `\"String\"'"
  },
  {
    "objectID": "reference/ad_publish.html",
    "href": "reference/ad_publish.html",
    "title": "ad_publish",
    "section": "",
    "text": "ad_publish - This command is used to set up a package for publication"
  },
  {
    "objectID": "reference/ad_publish.html#example-1",
    "href": "reference/ad_publish.html#example-1",
    "title": "ad_publish",
    "section": "Example 1",
    "text": "Example 1\nThis example assumes that there is already a adodown-styled package folder at the location the local myfolder is pointing to, and that some commands have already been created. Any mdhlp-files in the mdhlp folder in the folder myfolder is pointing to will be rendered to Stata helpfile format and saved in the sthlp folder. Then the command will update the version meta data\n* point a local to the folder where the package is located\nlocal myfolder \"path/to/folder\"\n\n* Render the Stata helpfiles\nad_publish, adf(\"`myfolder'\")"
  },
  {
    "objectID": "reference/ad_command.html",
    "href": "reference/ad_command.html",
    "title": "ad_command",
    "section": "",
    "text": "ad_command - Creates or removes commands in the adodown workflow."
  },
  {
    "objectID": "reference/ad_command.html#example-1",
    "href": "reference/ad_command.html#example-1",
    "title": "ad_command",
    "section": "Example 1",
    "text": "Example 1\nThis example assumes that there is already a adodown-styled package folder at the location the local myfolder is pointing to.\n* point a local to the folder with the package where a new command will be created\nlocal myfolder \"path/to/folder\"\n\n* Package meta info\nlocal pkg \"my_package\"\n\n* Add command mycmd to the package folder\nad_command create mycmd, adf(\"`myfolder'\") pkg(\"`pkg'\")"
  },
  {
    "objectID": "reference/ad_command.html#example-2",
    "href": "reference/ad_command.html#example-2",
    "title": "ad_command",
    "section": "Example 2",
    "text": "Example 2\nThis example includes the steps for how to create the adodown-styled package folder in the location the local myfolder is pointing to.\n* point a local to the folder where the package will be created\nlocal myfolder \"path/to/folder\"\n\n* Package meta info\nlocal pkg \"my_package\"\nlocal aut \"John Doe\"\nlocal des \"This packages does amazing thing A, B and C.\"\nlocal url \"https://github.com/lsms-worldbank/adodown\"\nlocal con \"jdoe@worldbank.org\"\n\n* Set up adodown-styled package folder\nad_setup, adfolder(\"`myfolder'\") autoconfirm    ///\n     name(\"`pkg'\") author(\"`aut'\") desc(\"`des'\") ///\n     url(\"`url'\") contact(\"`con'\")\n\n* Add command mycmd to the package folder\nad_command create mycmd, adf(\"`myfolder'\") pkg(\"`pkg'\")"
  },
  {
    "objectID": "reference/ad_update.html",
    "href": "reference/ad_update.html",
    "title": "ad_update",
    "section": "",
    "text": "ad_update - This command is used for short description."
  },
  {
    "objectID": "reference/ad_update.html#example-1",
    "href": "reference/ad_update.html#example-1",
    "title": "ad_update",
    "section": "Example 1",
    "text": "Example 1\nThis example assumes that there is already a adodown-styled package folder at the location the local myfolder is pointing to. Then the title is update to '<pkgname>': module to do great data work\", the minor version is incremented by 1 and the Stata target version is set to 14.1.\n* point a local to the folder where the package is located\nlocal myfolder \"path/to/folder\"\n* Package meta info\nlocal pkg \"my_package\"\n\n* Add command mycmd to the package folder\nad_update , adfolder(\"`myfolder'\") pkg(\"`pkg'\") ///\n  newtitle(\"module to do great data work\") newpkgversion(minor) newstataversion(14.1)"
  },
  {
    "objectID": "reference/adodown.html",
    "href": "reference/adodown.html",
    "title": "adodown",
    "section": "",
    "text": "Syntax\nadodown\nRead this helpfile in the adodown’s package web-documentation where you also find articles with guides and best practices related to the commands in this package.\n\n\nDescription\nThis command only returns the version number and version data to the user. This command has little application for a typical user. For packages installed on SSC it is important that a there is a command in the package that has the same name as the package. That is the main purpose of this command.\n\n\nOptions\nThis command has no options.\n\n\nFeedback, bug reports and contributions\nRead more about the commands in this package on the GitHub repository for the adodown package.\nPlease use the issues feature e to communicate any feedback, report bugs, or to make feature requests.\nPRs with suggestions for improvements are also greatly appreciated.\n\n\nAuthors\nLSMS Team, The World Bank lsms@worldbank.org"
  },
  {
    "objectID": "reference/ad_sthlp.html",
    "href": "reference/ad_sthlp.html",
    "title": "ad_sthlp",
    "section": "",
    "text": "ad_sthlp - Converts mdhlp-files to sthlp-files in the adodown workflow."
  },
  {
    "objectID": "reference/ad_sthlp.html#example-1",
    "href": "reference/ad_sthlp.html#example-1",
    "title": "ad_sthlp",
    "section": "Example 1",
    "text": "Example 1\nThis example assumes that there is already a adodown-styled package folder at the location the local myfolder is pointing to, and that some commands have already been created. Any mdhlp-files in the mdhlp folder in the folder myfolder is pointing to will be rendered to Stata helpfile format and saved in the sthlp folder.\n* point a local to the folder where the package is located\nlocal myfolder \"path/to/folder\"\n\n* Render the Stata helpfiles\nad_sthlp, adf(\"`myfolder'\")"
  },
  {
    "objectID": "reference/ad_sthlp.html#example-2",
    "href": "reference/ad_sthlp.html#example-2",
    "title": "ad_sthlp",
    "section": "Example 2",
    "text": "Example 2\nThis example includes the steps for how to create the adodown-styled package folder in the location the local myfolder is pointing to, creating some commands and then render the template mdhlp-files to Stata helpfiles.\n* point a local to the folder where the package is located\nlocal myfolder \"path/to/folder\"\n\n* Package meta info\nlocal pkg \"my_package\"\nlocal aut \"John Doe\"\nlocal des \"This packages does amazing thing A, B and C.\"\nlocal url \"https://github.com/lsms-worldbank/adodown\"\nlocal con \"jdoe@worldbank.org\"\n\n* Set up adodown-styled package folder\nad_setup, adfolder(\"`myfolder'\") autoconfirm    ///\n     name(\"`pkg'\") author(\"`aut'\") desc(\"`des'\") ///\n     url(\"`url'\") contact(\"`con'\")\n\n* Add command mycmd to the package folder\nad_command create mycmd1, adf(\"`myfolder'\") pkg(\"`pkg'\")\nad_command create mycmd2, adf(\"`myfolder'\") pkg(\"`pkg'\")\n\n* Render the Stata helpfiles\nad_sthlp, adf(\"`myfolder'\")"
  },
  {
    "objectID": "reference/ad_setup.html",
    "href": "reference/ad_setup.html",
    "title": "ad_setup",
    "section": "",
    "text": "Syntax\nad_setup , adfolder(string) [ name(string) description(string) author(string) contact(string) url(string) autoprompt github ]\n\n\n\n\n\n\n\noptions\nDescription\n\n\n\n\nadfolder(string)\nLocation where to create the adodown-styled package\n\n\nname(string)\nName of package\n\n\ndescription(string)\nDescription of package\n\n\nauthor(string)\nAuthor or authors\n\n\ncontact(string)\nContact information\n\n\nurl(string)\nURL (for example to repo hosting the package)\n\n\nautoprompt\nSuppress the prompt for missing non-required input\n\n\ngithub\nAdd GitHub files without prompting\n\n\n\nRead this helpfile in the adodown’s package web-documentation where you also find articles with guides and best practices related to the commands in this package.\n\n\nDescription\nThis command creates the initial folder template needed to write and document Stata command packages in the adodown workflow.\nThis workflow makes it easier to create Stata command and packages both ready for distribution on SSC and from a GitHub repository. This workflow also makes writing both web-documentation and helpfiles easier. The helpfiles are written in markdown files that are then used both to render Stata helpfile in .sthlp-format using the ad_sthlp command, and to render web documentation that can, for example, be hosted in a GitHub Page.\n\n\nOptions\nadfolder(string) is used to indicate the location where package folder will be created. This folder can, for example, be a newly created GitHub repository cloned to the local computer.\nname(string) specifies the name of the package that will be created. This is the name that will then be used in ssc install <name> or net install <name>. A command with the same name will be created and added to the package. While this option is optional, this package meta data is required. If a name is not provided in this option, then the user will be prompted to enter the name interactively.\ndescription(string) specifies the description of the package. This is the description paragraph that will displayed when using ssc describe <name> or net describe <name>. If a description is not provided in this option, then the user will be prompted to enter the description interactively. Since this meta data is not required, the user can leave it empty.\nauthor(string) specifies the name of the author or authors of this package. This information will be included when using ssc describe <name> or net describe <name>. While this option is optional, this package meta data is required. If an author is not provided in this option, then the user will be prompted to enter the name interactively.\ncontact(string) specifies the contact information where a users of this package can ask for support. This information will be included when using ssc describe <name> or net describe <name>. If contact information is not provided in this option, then the user will be prompted to enter the contact information interactively. Since this meta data is not required, the user can leave it empty.\nurl(string) specifies a website for where this code is hosted. This should not be where the web-documentation generated in the adodown is hosted, but where the source code is hosted. The web-documentation will include a link pointing to the URL. If using GitHub, then the intended URL should be on this format: https://github.com/lsms-worldbank/adodown. This information will be included when using ssc describe <name> or net describe <name>. If a URL is not provided in this option, then the user will be prompted to enter the URL interactively. Since this meta data is not required, the user can leave it empty.\nautoprompt suppresses the prompt for missing non-required input, such as package description or author. If this options is used, the command will assume that GitHub templates should not be used. When this option is used, the command will still prompt the user for the package name unless that is provided in name() or author() as that information is required.\ngithub makes the command add files useful if the package is stored in a GitHub repository. The two files that are added are a .gitignore file and a GitHub Actions workflow .yaml file. The .gitignore is tailored to adodown styled packages such that only required files are pushed to the repository. This ignore template may be modified if preferred or needed. The Github Actions workflow file includes instructions for an automated workflow to generate web based documentation. Read more about this workflow and how to enable it in your repository here. TODO: Add link to vignette when live.\n\n\nExamples\nThis example creates a package folder for a package named my_package in the location that the local myfolder points to.\n* point a local to the folder where the package will be created\nlocal myfolder \"path/to/folder\"\n\n* Package meta info\nlocal pkg \"my_package\"\nlocal aut \"John Doe\"\nlocal des \"This packages does amazing thing A, B and C.\"\nlocal url \"https://github.com/lsms-worldbank/adodown\"\nlocal con \"jdoe@worldbank.org\"\n\n* Set up adodown-styled package folder\nad_setup, adfolder(\"`myfolder'\") autoprompt    ///\n     name(\"`pkg'\") author(\"`aut'\") desc(\"`des'\") ///\n     url(\"`url'\") contact(\"`con'\")\n\n\nFeedback, bug reports and contributions\nRead more about the commands in this package on the GitHub repository for the adodown package.\nPlease use the issues feature e to communicate any feedback, report bugs, or to make feature requests.\nPRs with suggestions for improvements are also greatly appreciated.\n\n\nAuthors\nLSMS Team, The World Bank lsms@worldbank.org"
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Function reference",
    "section": "",
    "text": "Functions\nDescription\n\n\n\n\nad_command\nCreates or removes commands in the adodown workflow.\n\n\nad_publish\nThis command is used to set up a package for publication\n\n\nad_setup\nSets up the initial package folder in the adodown workflow.\n\n\nad_sthlp\nConverts mdhlp-files to sthlp-files in the adodown workflow.\n\n\nad_update\nThis command is used for short description.\n\n\nadodown\nPackage command with utilities for the rest of the package"
  }
]